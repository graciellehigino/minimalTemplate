library(devtools)
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
library(minimalTemplate)
library(minimalTemplate)
devtools::document()
devtools::document()
library(minimalTemplate)
devtools::document()
devtools::document()
library(minimalTemplate)
?download_csl
eco <- grep(pattern = "ecology", x = rcrossref::get_styles(), value = TRUE)
eco
download_csl(journal_style = eco[4], directory = ".")
download_csl(journal_style = eco[4], directory = "")
setup_project <-
function(name, path = getwd()) {
stopifnot(is.character(name))
if (grepl("-| ", name)) {
warning("name has a space or dash in it. Replacing with '.'", call. = FALSE)
name <- gsub("-| ", ".", name)
}
proj_path <- normalizePath(path = file.path(path, name), mustWork = FALSE)
done("Creating project '", name, "' in '", proj_path, "'.")
create_project(proj_path, rstudio = TRUE)
withr::with_dir(
new = proj_path,
{
fs::dir_create("R")
use_description()
utils::capture.output(use_package('devtools'))
utils::capture.output(use_package('knitr'))
utils::capture.output(use_package('rmarkdown'))
include_readmes()
include_r_files()
use_git()
if (is.null(git2r::config()$user.name) & is.null(git2r::config()$global$user.name)) {
warning(
"Please set your user.name and user.email in your Git config.",
" Use git2r::config(user.name = 'name', user.email = 'email').",
" After you add your config, open the project and run the command usethis::use_git().",
call. = FALSE
)
} else {
use_git()
}
})
invisible(TRUE)
}
setup_project()
setup_project("aaaaaaaaaaaa", path = "~/")
setup_project <-
function(name, path = getwd()) {
stopifnot(is.character(name))
if (grepl("-| ", name)) {
warning("name has a space or dash in it. Replacing with '.'", call. = FALSE)
name <- gsub("-| ", ".", name)
}
proj_path <- normalizePath(path = file.path(path, name), mustWork = FALSE)
done("Creating project '", name, "' in '", proj_path, "'.")
create_project(proj_path, rstudio = TRUE)
withr::with_dir(
new = proj_path,
{
fs::dir_create("R")
use_description()
utils::capture.output(use_package('devtools'))
utils::capture.output(use_package('knitr'))
utils::capture.output(use_package('rmarkdown'))
include_readmes()
include_r_files()
use_git()
if (is.null(git2r::config()$user.name) & is.null(git2r::config()$global$user.name)) {
warning(
"Please set your user.name and user.email in your Git config.",
" Use git2r::config(user.name = 'name', user.email = 'email').",
" After you add your config, open the project and run the command usethis::use_git().",
call. = FALSE
)
} else {
use_git()
}
})
invisible(TRUE)
}
setup_project("aaaaaaaaaaaa", path = "~/")
source('~/.active-rstudio-document', echo=TRUE)
usethis::edit_git_config()
usethis::create_project(path = "~/", rstudio = TRUE, open = TRUE)
usethis::use_readme_md()
usethis::proj_get()
usethis::proj_set(path = ".")
usethis::use_readme_md()
usethis::use_bioc_badge()
usethis::use_badge()
??withr
?fs::dir_create
??includes_r_files
setup_project("aaaaaaaaaaaa", path = "~")
setup_project <-
function(name, path = getwd()) {
stopifnot(is.character(name))
if (grepl("-| ", name)) {
warning("name has a space or dash in it. Replacing with '.'", call. = FALSE)
name <- gsub("-| ", ".", name)
}
proj_path <- normalizePath(path = file.path(path, name), mustWork = FALSE)
done("Creating project '", name, "' in '", proj_path, "'.")
usethis::create_project(proj_path, rstudio = TRUE)
withr::with_dir(
new = proj_path,
{
fs::dir_create("R")
use_description()
utils::capture.output(use_package('devtools'))
utils::capture.output(use_package('knitr'))
utils::capture.output(use_package('rmarkdown'))
include_readmes()
include_r_files()
use_git()
if (is.null(git2r::config()$user.name) & is.null(git2r::config()$global$user.name)) {
warning(
"Please set your user.name and user.email in your Git config.",
" Use git2r::config(user.name = 'name', user.email = 'email').",
" After you add your config, open the project and run the command usethis::use_git().",
call. = FALSE
)
} else {
use_git()
}
})
invisible(TRUE)
}
setup_project("aaaaaaaaaaaa", path = "~")
setup_project <-
function(name, path = getwd()) {
stopifnot(is.character(name))
if (grepl("-| ", name)) {
warning("name has a space or dash in it. Replacing with '.'", call. = FALSE)
name <- gsub("-| ", ".", name)
}
proj_path <- normalizePath(path = file.path(path, name), mustWork = FALSE)
done("Creating project '", name, "' in '", proj_path, "'.")
usethis::create_project(proj_path, rstudio = TRUE)
withr::with_dir(
new = proj_path,
{
fs::dir_create("R")
usethis::use_description()
utils::capture.output(use_package('devtools'))
utils::capture.output(use_package('knitr'))
utils::capture.output(use_package('rmarkdown'))
include_readmes()
include_r_files()
use_git()
if (is.null(git2r::config()$user.name) & is.null(git2r::config()$global$user.name)) {
warning(
"Please set your user.name and user.email in your Git config.",
" Use git2r::config(user.name = 'name', user.email = 'email').",
" After you add your config, open the project and run the command usethis::use_git().",
call. = FALSE
)
} else {
use_git()
}
})
invisible(TRUE)
}
setup_project("aaaaaaaaaaaa", path = "~")
setup_project <-
function(name, path = getwd()) {
stopifnot(is.character(name))
if (grepl("-| ", name)) {
warning("name has a space or dash in it. Replacing with '.'", call. = FALSE)
name <- gsub("-| ", ".", name)
}
proj_path <- normalizePath(path = file.path(path, name), mustWork = FALSE)
done("Creating project '", name, "' in '", proj_path, "'.")
usethis::create_project(proj_path, rstudio = TRUE)
withr::with_dir(
new = proj_path,
{
fs::dir_create("R")
usethis::use_description()
utils::capture.output(usethis::use_package('devtools'))
utils::capture.output(usethis::use_package('knitr'))
utils::capture.output(usethis::use_package('rmarkdown'))
include_readmes()
include_r_files()
use_git()
if (is.null(git2r::config()$user.name) & is.null(git2r::config()$global$user.name)) {
warning(
"Please set your user.name and user.email in your Git config.",
" Use git2r::config(user.name = 'name', user.email = 'email').",
" After you add your config, open the project and run the command usethis::use_git().",
call. = FALSE
)
} else {
use_git()
}
})
invisible(TRUE)
}
setup_project("aaaaaaaaaaaa", path = "~")
rcrossref:::crAddins()
usethis::create_project(path = "teste42", rstudio = TRUE, open = TRUE)
usethis::create_project(path = "~/teste42", rstudio = TRUE, open = TRUE)
setwd("~/teste42/")
name <- "~/teste42/"
dir.create(file.path(name, "data"))
dir.create(file.path(name, "data/clean"))
dir.create(file.path(name, "data/raw"))
dir.create(file.path(name, "data/clean"))
dir.create(file.path(name, "data"))
dir.create(file.path(name, "data/clean"))
dir.create(file.path(name, "data/raw"))
library(minimalTemplate)
setup_template <- function(name){
# criar r project
usethis::create_project(path = name, rstudio = TRUE, open = TRUE)
# criar pastas
file.copy(from = system.file("template/full/data", package = "minimalTemplate"), to = name, recursive = TRUE)
file.copy(from = system.file("template/full/manuscript", package = "minimalTemplate"), to = name, recursive = TRUE)
file.copy(from = system.file("template/full/output", package = "minimalTemplate"), to = name, recursive = TRUE)
file.copy(from = system.file("template/full/main-script.Rmd", package = "minimalTemplate"), to = name, recursive = TRUE)
}
setup_template(name = "viuviu")
library(minimalTemplate)
library(minimalTemplate)
library(minimalTemplate)
devtools::load_all(".")
minimalTemplate::setup_template("hahahahaha")
minimalTemplate::setup_template("~/hahahahaha")
library(minimalTemplate)
devtools::document()
library(minimalTemplate)
devtools::document()
library(minimalTemplate)
library(minimalTemplate)
